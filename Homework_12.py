# Задача 1
# Проработать встроенние функции множеств. Встроенние функции можно взять на сайте
# (https://www.programiz.com/python-programming/set). Но на єтом сайте приведени примери
# для списков, Задача переделать примери для множеств.
# Встроенные функции
# all()	Возвращает значение True, если все элементы множества являются true (или если множество пусто).
# any()	Возвращает значение True, если какой-либо элемент множества является true.
# Если множество пусто, возвращает значение False.
# enumerate()	Возвращает пронумерованный объект. Содержит индекс и значение всех элементов множества в виде пары.
# len()	Возвращает длину (количество элементов) множества.
# max()	Возвращает наибольший элемент во множестве.
# min()	Возвращает наименьший элемент во множестве.
# sorted()	Возвращает новый отсортированный список, состоящий из элементов множества (не сортирует само множество).
# sum()	Возвращает сумму всех элементов множества.
set_test = {34, 67, 55, 78, 82}
print(all(set_test))
print(any(set_test))
print(enumerate(set_test))
print(len(set_test))
print(min(set_test))
print(max(set_test))
print(sorted(set_test))
print(sum(set_test))

# Задача 2
# Дано три множества
# set1 = {1, 2, 3, 4}
# set2 = {2, 3, 5, 6}
# set3 = {3, 4, 6, 7}
# Одним действием (одной строкой) виполнить intersection єтих множеств
set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
set4 = set1.intersection(set2.intersection(set3))
print(set4)

# Задача 3
# Дано три множества
# set1 = {1, 2, 3, 4}
# set2 = {2, 3, 5, 6}
# set3 = {3, 4, 6, 7}
# Одним действием (одной строкой) виполнить difference єтих множеств
set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
set4 = set1.difference(set2, set3)
print(set4)

# Задача 4
# Дано три множества
# set1 = {1, 2, 3, 4}
# set2 = {2, 3, 5, 6}
# set3 = {3, 4, 6, 7}
# Одним действием (одной строкой) виполнить union єтих множеств
set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
print(set1.union(set2, set3))

# Задача 5
# Добавить список элементов к заданному набору
# sampleSet = {"Yellow", "Orange", "Black"}
# sampleList = ["Blue", "Green", "Red"]
sampleSet = {"Yellow", "Orange", "Black"}
sampleList = ["Blue", "Green", "Red"]
newSet = sampleSet.union(sampleList)
print(newSet)

# Задача 6
# Вернуть новый набор идентичных предметов из заданных двух наборов
# set1 = {10, 20, 30, 40, 50}
# set2 = {30, 40, 50, 60, 70}
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set4 = set1.intersection(set2)
print(set4)

# Задача 7
# Возвращает новый набор со всеми элементами из обоих наборов, удаляя дубликаты.
# set1 = {10, 20, 30, 40, 50}
# set2 = {30, 40, 50, 60, 70}
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set3 = set1.union(set2)
print(set3)

# Задача 8
# Учитывая два набора Python, обновите первый набор элементами, которые существуют только в первом наборе,
# но не во втором наборе.
# set1 = {10, 20, 30}
# set2 = {20, 40, 50}
set1 = {10, 20, 30}
set2 = {20, 40, 50}
set1.difference_update(set2)
print(set1)

# Задача 9
# Удалите єлементи 10, 20, 30 из следующего набора
# set1 = {10, 20, 30, 40, 50}
set1 = {10, 20, 30, 40, 50}
set2 = {10, 20, 30}
set1.difference_update(set2)
print(set1)

# Задача 11
# Проверьте, есть ли в двух наборах какие-либо общие элементы. Если да, отобразите общие элементы.
# set1 = {10, 20, 30, 40, 50}
# set2 = {60, 70, 80, 90, 10}
set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
print(set1.intersection(set2))

# Задача 12
# Обновите набор 1, добавив элементы из набора 2
# set1 = {10, 20, 30, 40, 50}
# set2 = {60, 70, 80, 90, 10}
set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
set1.update(set2)
print(set1)

# Задача 13
# Удалите элементы из set1, которые не являются общими для set1 и set2
# set1 = {10, 20, 30, 40, 50}
# set2 = {30, 40, 50, 60, 70}
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
print(set1)
